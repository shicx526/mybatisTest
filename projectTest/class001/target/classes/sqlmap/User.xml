<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="test">
    <!--    在映射文件中配置很多sql语句-->

    <!--    通过id查询用户表记录-->
    <!--    通过select执行数据库查询
    id:标识映射文件中的sql，将sql语句封装到mapperStatement对象中,称为statement的id
    #{}标识一个占位符
    #{id}:其中id标识接收输入的参数，参数名就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其他名称
    paramterType:指定参数类型，这里指定int
    resultType:指定sql输出结果的所映射的JAVA对象类型

    -->
    <select id="findUserById" parameterType="int" resultType="com.scx.mybatis.po.User">
        select * from user where id = #{id}
    </select>
    <!--    根据用户名称模糊查询用户信息，可能返回多条
    resultType:指定就是单条记录所映射的JAVA对象类型
    ${}:表示拼接sql串
    使用${}拼接sql，会引起sql注入，不太安全
    ${value}:其中id标识接收输入的参数，如果输入参数是简单类型，则${}中只能使用value.
    -->
    <select id="findUserByName" parameterType="java.lang.String"  resultType="com.scx.mybatis.po.User">
        select * from user where username like '%${value}%'
    </select>
<!--    添加用户-->
<!--    parameterType：指定参数类型是pojo（包括用户信息）-->
<!--    #{}指定pojo的属性名，接收到pojo的属性值，mybatis通过OGNL获取对象属性值-->

    <insert id="insertUser" parameterType="com.scx.mybatis.po.User">
        <!--         将插入数据的主键返回，返回到user对象中
            SELECT LAST_INSERT_ID()得到刚insert进去记录的主键值，只适用于自增主键
            keyProperty:将查询得到的主键设置到parameterType指定的对象的属性中
            order:SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说她的执行顺序
            resultType:指定SELECT LAST_INSERT的结果类型
            -->
        <selectKey keyProperty="id" order="AFTER"  resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        <!--        使用mysql的uuid()生成主键 ,主键需要改为varchar(35)
         过程：首先通过uuid()得到主键，将主键设置到user对象的id属性中
         其次在insert执行时，从user对象中取出id属性值
         -->
<!--         <selectKey keyProperty="id" order="BEFORE"  resultType="java.lang.String">-->
<!--            SELECT uuid()-->
<!--        </selectKey>-->
        insert into user (`username`, `birthday`, `sex`, `address`) values (#{username},#{birthday},#{sex},#{address})
    </insert>

<!--    删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from  user where id = #{id}
    </delete>
<!--    更新用户
需要传入用户id
需要传入用户的更新信息
parameterType指定user对象，包括id和更新信息，注意id必须存在
-->
    <update id="updateUser" parameterType="com.scx.mybatis.po.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}  where id = #{id}
    </update>
</mapper>